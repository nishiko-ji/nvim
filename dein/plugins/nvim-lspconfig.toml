[[plugins]]
 repo = 'neovim/nvim-lspconfig'
 on_event = ['BufEnter']
 hook_source = '''
 lua << EOF
 local nvim_lsp = require('lspconfig')
 local on_attach = function (client, bufnr)
 local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
 local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

local opts = { noremap=true, silent=true }
 buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
 buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
 buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
 buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
 buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
 buf_set_keymap('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
 buf_set_keymap('n', 'g[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
 buf_set_keymap('n', 'g]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
end

 local lsp_installer = require("nvim-lsp-installer")
 lsp_installer.on_server_ready(function(server)
   local opts = {}
   opts.on_attach = on_attach
   server:setup(opts)
   vim.cmd [[ do User LspAttachBuffers ]]
 end)
EOF
'''

[[plugins]]
 repo ='williamboman/nvim-lsp-installer'
 on_source = ['nvim-lspconfig']

[[plugins]]
 repo = 'matsui54/denops-signature_help'
 on_source = 'ddc.vim'
 hook_source = '''
 call signature_help#enable()
'''

[[plugins]]
 repo = 'matsui54/denops-popup-preview.vim'
 on_source = 'ddc.vim'
 hook_source = '''
 call popup_preview#enable()
'''

# [[plugins]]
#  repo = 'neovim/nvim-lspconfig'
#  on_event = ['BufEnter']
#  hook_source = '''
# lua << EOF
# local nvim_lsp = require('lspconfig')
# local on_attach = function(client, bufnr)
#   local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
#
#   -- Mappings.
#   local opts = { noremap=true, silent=true }
#   buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
#   buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
#   buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
#   buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
#   buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
#   buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
#   buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
#   buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
#   buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
#   buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
#   buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
#   buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
#   buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
#   buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
#   buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
#
#   -- Set autocommands conditional on server_capabilities
#   if client.resolved_capabilities.document_highlight then
#     require('lspconfig').util.nvim_multiline_command [[
#       :hi LspReferenceRead cterm=bold ctermbg=red guibg=LightYellow
#       :hi LspReferenceText cterm=bold ctermbg=red guibg=LightYellow
#       :hi LspReferenceWrite cterm=bold ctermbg=red guibg=LightYellow
#       augroup lsp_document_highlight
#         autocmd!
#         autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
#         autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
#       augroup END
#     ]]
#   end
# end
#   nvim_lsp["gopls"].setup { on_attach = on_attach }
# EOF
#  '''
# #  hook_source = '''
# #  lua << EOF
# #  local nvim_lsp = require('lspconfig')
# #  local on_attach = function (client, bufnr)
# #  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
# #  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
# #
# #  local opts = { noremap=true, silent=true }
# #   buf_set_keymap('n', '<Leader>z', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
# #   buf_set_keymap('n', '<Leader>e', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
# #   buf_set_keymap('n', '<Leader>c', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
# #   buf_set_keymap('n', '<Leader>h', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
# #   buf_set_keymap('n', '<Leader>b', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
# #   buf_set_keymap('n', '<Leader>g', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
# #   buf_set_keymap('n', '<Leader>[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
# #   buf_set_keymap('n', '<Leader>]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
# #  end
# #
# #  require'lspconfig'.tsserver.setup{}
# #  require'lspconfig'.solargraph.setup{}
# #
# #  require'lspinstall'.setup()
# #  local servers = require'lspinstall'.installed_servers()
# #  for _, server in pairs(servers) do
# #   require'lspconfig'[server].setup{}
# #  end
# # EOF
# # '''
#
# # [[plugins]]
# #  repo = 'kabouzeid/nvim-lspinstall'
# #  on_source = ['nvim-lspconfig']
# #  hook_source = '''
# #   lua require'lspinstall'.setup()
# # '''
#
# # [[plugins]]
# #  repo = 'matsui54/ddc-nvim-lsp-doc'
# #  on_source = ['ddc.vim']
# #  hook_source = '''
# #  let g:ddc_nvim_lsp_doc_config = {
# #       \ 'documentation': {
# #       \   'enable': v:true,
# #       \   'border': 'single',
# #       \   'maxWidth': 60,
# #       \   'maxHeight': 30,
# #       \ },
# #       \ 'signature': {
# #       \   'maxHeight': 5,
# #       \ },
# #       \ }
# #   call ddc_nvim_lsp_doc#enable()
# # '''
